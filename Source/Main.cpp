/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"
#include "Audio/Engine.h"
#include "GUI/MainWindow.h"
#include "Core/ProjectManager.h"

//==============================================================================
class KentDAWApplication  : public JUCEApplication, juce::ApplicationCommandTarget
{
public:
    //==============================================================================
    KentDAWApplication() {}

    const String getApplicationName() override       { return ProjectInfo::projectName; }
    const String getApplicationVersion() override    { return ProjectInfo::versionString; }
    bool moreThanOneInstanceAllowed() override       { return true; }

    //==============================================================================
    void initialise (const String& commandLine) override
    {
        registerCommands();
        _mainWindow = new MainWindow(_commandsManager);
    }

    void shutdown() override
    {
    }

    void KentDAWApplication::registerCommands()
    {
        _commandsManager.registerAllCommandsForTarget(this);
        _commandsManager.registerAllCommandsForTarget(getInstance());
    }

    ApplicationCommandTarget * KentDAWApplication::getNextCommandTarget() override
    {
        return JUCEApplication::getNextCommandTarget();
    }

    void KentDAWApplication::getAllCommands(Array<CommandID>& commands) override
    {
        const CommandID ids[] = {
            ProjectManager::newProject,
            ProjectManager::openProject,
        };

        JUCEApplication::getAllCommands(commands);
        commands.addArray(ids, numElementsInArray(ids));
    }

    void KentDAWApplication::getCommandInfo(CommandID commandID, ApplicationCommandInfo & result) override
    {
        const String projectManagement("Project Management");

        JUCEApplication::getCommandInfo(commandID, result);

        switch (commandID) {
        case ProjectManager::newProject:
            result.setInfo("New Project...", "Create a new project.", projectManagement, 0);
            result.addDefaultKeypress('N', ModifierKeys::commandModifier);
            break;

        case ProjectManager::openProject:
            result.setInfo("Open Project...", "Open an existing project.", projectManagement, 0);
            result.addDefaultKeypress('O', ModifierKeys::commandModifier);
            break;

        default:
            break;
        }
    }

    bool KentDAWApplication::perform(const InvocationInfo & info) override
    {
        ApplicationCommandInfo commandInfo(info.commandID);

        getCommandInfo(info.commandID, commandInfo);

        if (commandInfo.categoryName == "Project Management") {
            return _projectManager.perform(info);
        }

        return JUCEApplication::perform(info);
    }

    //==============================================================================
    void systemRequestedQuit() override
    {
        // This is called when the app is being asked to quit: you can ignore this
        // request and let the app carry on running, or call quit() to allow the app to close.
        quit();
    }

    void anotherInstanceStarted (const String& commandLine) override
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
        // the other instance's command-line arguments were.
    }

private:
    Audio::Engine _engine;
    ScopedPointer<MainWindow> _mainWindow;
    ProjectManager _projectManager;
    ApplicationCommandManager _commandsManager;
};

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (KentDAWApplication)
